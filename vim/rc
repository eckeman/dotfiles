set nocompatible
set nomodeline
set lazyredraw
set shortmess+=I " No intro message
set vb t_vb= " No beep or flash
set t_Co=256 " 256 colors

set encoding=utf-8

" GUI
"set clipboard=unnamed

" Line numbers
set number

" Command line
set history=1000
set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Status line
set statusline=%<%f\ %=\:\b%n%y%m%r%w\ %l,%c%V\ %P
set laststatus=2

" Buffer
set list listchars=tab:▸\ ,trail:•
set matchpairs+=<:>
set nowrap
set noequalalways
set backspace=indent,eol,start

" Tabs
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase
set gdefault

" File
set hidden
set autowriteall
set autoread

" Persistent Undo
if has('persistent_undo')
  set undofile
  set undodir=~/.vimundo
endif

" No backup
set nobackup
set nowritebackup
set noswapfile

" Tags
set tags=tags;

" Pathogen
filetype off
silent! call pathogen#runtime_append_all_bundles()
silent! call pathogen#helptags()

filetype plugin indent on
syntax on


" Auto Commands {
if has('autocmd')
  augroup RestoreCursorPos " {
    au!
    au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \    exe "normal g`\"" |
    \ endif
  augroup end " }

  augroup Files
    au!
    au FocusLost silent! :wa
    au BufWritePost .vimrc source $MYVIMRC

    " Sort CSS Properties
    au BufNewFile,BufRead *.css  nnoremap <buffer> <Leader>S ?{<CR>jV/\v^\s*\}?$<CR>k:sort<CR>:noh<CR>
  augroup end
endif
" }

" Mappings {
  let mapleader=','

  " Make Y yank to the end of the line
  nnoremap Y y$

  " Move lines {
    nnoremap <M-j> mz:m+<CR>
    nnoremap <M-k> mz:m-2<CR>
    vnoremap <M-j> :m'>+<CR>
    vnoremap <M-k> :m'<-2<CR>

    nnoremap <D-j> <M-j>
    nnoremap <D-k> <M-k>
    vnoremap <D-j> <M-j>
    vnoremap <D-k> <M-k>
  " }

  " Window {
    nnoremap <C-h> <C-w>h
    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-l> <C-w>l
    nnoremap <Leader>wv <C-w>v<C-w>l
    nnoremap <Leader>ws <C-w>s<C-w>j
  " }

  " Shortcuts {
    " Tag navigation
    nnoremap <Tab> <C-]>
    nnoremap <S-Tab> <C-T>

    " Folding
    nnoremap <Space> za
    vnoremap <Space> za

    " Change to directory of current buffer
    nnoremap <Leader>cd :cd %:p:h<CR>

    " Clear search results
    nnoremap <Leader><Space> :noh<CR>

    " Select pasted text
    nnoremap <Leader>v V`]

    " Toggle paste
    nnoremap <Leader>P :setlocal paste!<CR>

    " Toggle numbers
    nnoremap <Leader># :set number!<CR>

    " Toggle list
    nnoremap <Leader>L :set list!<CR>
  " }

  " Tools {
    " Remove trailing whitespace
    nnoremap <Leader>W :%s/\s\+$//<CR>:let @/=''<CR>

    " Retab
    nnoremap <Leader>R :ret!<CR>

    " Write as sudo
    cmap w!! w !sudo tee % >/dev/null
  " }

  " Breaking bad habits {
    inoremap  <Up>     <Nop>
    inoremap  <Down>   <Nop>
    inoremap  <Left>   <Nop>
    inoremap  <Right>  <Nop>
    noremap   <Up>     <Nop>
    noremap   <Down>   <Nop>
    noremap   <Left>   <Nop>
    noremap   <Right>  <Nop>
  " }
" }

" Bundles {
  color molokai

  " Netrw {
    let g:netrw_special_syntax = 1
    let g:netrw_list_hide = '^\.[^\.]'
  " }

  " Tagbar {
    nnoremap <silent> <Leader>t :TagbarToggle<CR>
  " }

  " Gundo {
    let g:gundo_preview_bottom = 1
    let g:gundo_preview_height = 10
    let g:gundo_width = 30
    nnoremap <Leader>u :GundoToggle<CR>
  " }

  " Ack {
    nnoremap <Leader>a :Ack
    nnoremap <Leader>af :AckFile
  " }

  " SuperTab {
    let g:SuperTabDefaultCompletionType = 'context'
    let g:SuperTabLongestEnhanced = 1
  " }

  " LustyExplorer {
    let g:LustyExplorerSuppressRubyWarning = 1
    nnoremap <Leader>r :LustyFilesystemExplorerFromHere<CR>
    nnoremap <Leader>g :LustyBufferGrep<CR>
    nnoremap <Leader>b :LustyBufferExplorer<CR>
  " }

  " NERDTree {
    let NERDTreeIgnore = ['\.pyc$', '\.rbc$', '\~$']
    let NERDTreeMinimalUI = 1
    let NERDTreeDirArrows = 1
    map <Leader>n :NERDTreeToggle<CR>
  " }
" }

" http://vim.wikia.com/wiki/Deleting_a_buffer_without_closing_the_window
" delete the buffer; keep windows; create a scratch buffer if no buffers left
function! s:Kwbd(kwbdStage)
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) == winnr()
      return
    endif
  endif
  if(a:kwbdStage == 1)
    if(!buflisted(winbufnr(0)))
      bd!
      return
    endif
    let s:kwbdBufNum = bufnr("%")
    let s:kwbdWinNum = winnr()
    windo call s:Kwbd(2)
    execute s:kwbdWinNum . 'wincmd w'
    let s:buflistedLeft = 0
    let s:bufFinalJump = 0
    let l:nBufs = bufnr("$")
    let l:i = 1
    while(l:i <= l:nBufs)
      if(l:i != s:kwbdBufNum)
        if(buflisted(l:i))
          let s:buflistedLeft = s:buflistedLeft + 1
        else
          if(bufexists(l:i) && !strlen(bufname(l:i)) && !s:bufFinalJump)
            let s:bufFinalJump = l:i
          endif
        endif
      endif
      let l:i = l:i + 1
    endwhile
    if(!s:buflistedLeft)
      if(s:bufFinalJump)
        windo if(buflisted(winbufnr(0))) | execute "b! " . s:bufFinalJump | endif
      else
        enew
        let l:newBuf = bufnr("%")
        windo if(buflisted(winbufnr(0))) | execute "b! " . l:newBuf | endif
      endif
      execute s:kwbdWinNum . 'wincmd w'
    endif
    if(buflisted(s:kwbdBufNum) || s:kwbdBufNum == bufnr("%"))
      execute "bd! " . s:kwbdBufNum
    endif
    if(!s:buflistedLeft)
      set buflisted
      set bufhidden=delete
      set buftype=nofile
      setlocal noswapfile
    endif
    else
    if(bufnr("%") == s:kwbdBufNum)
      let prevbufvar = bufnr("#")
      if(prevbufvar > 0 && buflisted(prevbufvar) && prevbufvar != s:kwbdBufNum)
        b #
      else
        bn
      endif
    endif
  endif
endfunction

command! Kwbd call <SID>Kwbd(1)
nnoremap <silent> <Plug>Kwbd :<C-u>Kwbd<CR>
nmap <C-B> <Plug>Kwbd

if has('gui_running')
  set guifont=Menlo:h12
  set guioptions=aemg
  set guitablabel=%t
  set mousehide

  if has('mac')
    let macvim_skip_cmd_opt_movement = 1
    let macvim_hig_shift_movement = 1
  endif
endif
