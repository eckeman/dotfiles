set nocompatible
set nomodeline
set lazyredraw
set noequalalways

set shortmess+=I " No intro message
set vb t_vb= " No beep or flash
set t_Co=256 " 256 colors
set clipboard=unnamed " Use system clipboard

" Window
syntax on
set number
set nowrap
set list listchars=tab:▸\ ,trail:•
set matchpairs+=<:>

" Editing
set encoding=utf-8
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set backspace=indent,eol,start

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase
set gdefault

" Command line
set history=1000
set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Status line
set statusline=%<%f\ %=\:\b%n%y%m%r%w\ %l,%c%V\ %P
set laststatus=2

" File
set hidden
set autowriteall
set autoread
set undofile
set undodir=~/.vimundo
set nowritebackup
set noswapfile

" Tags
set tags=tags;

" Pathogen
filetype off
silent! call pathogen#runtime_append_all_bundles()
silent! call pathogen#helptags()

color molokai

" Remember last location in file
augroup RestoreCursorPos
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g`\"" | endif
augroup end

" Reload vimrc on write
au BufWritePost .vimrc source $MYVIMRC

" Filetypes {
  function! s:setupWrapping()
    set wrap
    set wrapmargin=2
    set textwidth=72
  endfunction

  " Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
  au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby
  " Add json syntax highlighting
  au BufRead,BufNewFile *.json set ft=javascript

  au BufRead,BufNewFile *.{txt,md,markdown,mdown,mkd,mkdn} call s:setupWrapping()

  " Load plugin and indent settings for the detected filetype
  filetype plugin indent on
" }

let mapleader=','
" Mappings {
  " Yank to the end of the line
  nnoremap Y y$

  " Tagbar
  map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
  map <C-\> :tnext<CR>

  " Move lines
  nnoremap <A-j> :m+<CR>==
  nnoremap <A-k> :m-2<CR>==
  inoremap <A-j> <Esc>:m+<CR>==gi
  inoremap <A-k> <Esc>:m-2<CR>==gi
  vnoremap <A-j> :m'>+<CR>gv=gv
  vnoremap <A-k> :m-2<CR>gv=gv

  " Window
  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l
  nnoremap <Leader>wv <C-w>v<C-w>l
  nnoremap <Leader>ws <C-w>s<C-w>j

  " Tag navigation
  nnoremap <Tab> <C-]>
  nnoremap <S-Tab> <C-T>

  " Folding
  nnoremap <Space> za
  vnoremap <Space> za

  " Change to directory of current buffer
  nnoremap <Leader>cd :cd %:p:h<CR>
  " Clear search results
  nnoremap <Leader><Space> :noh<CR>
  " Select pasted text
  nnoremap <Leader>v V`]

  " Toggle paste
  nnoremap <Leader>P :setlocal paste!<CR>
  " Toggle numbers
  nnoremap <Leader># :set number!<CR>

  " Remove trailing whitespace
  nnoremap <Leader>W :%s/\s\+$//<CR>:let @/=''<CR>
  " Retab
  nnoremap <Leader>R :ret!<CR>
  " Write as sudo
  cmap w!! w !sudo tee % >/dev/null
  " Delete buffer
  map <C-B> <Plug>Kwbd

  " Sort CSS properties
  au BufRead,BufNewFile *.{css,scss} nnoremap <buffer> <Leader>S ?{<CR>jV/\v^\s*\}?$<CR>k:sort<CR>:noh<CR>

  " Breaking bad habits
  nnoremap <Up>    <Nop>
  nnoremap <Down>  <Nop>
  nnoremap <Left>  <Nop>
  nnoremap <Right> <Nop>
" }

" Bundles {
  " Netrw
  let g:netrw_special_syntax=1
  let g:netrw_list_hide='^\.[^\.]'

  " Tagbar
  nnoremap <silent> <Leader>t :TagbarToggle<CR>

  " Gundo
  let g:gundo_preview_bottom=1
  let g:gundo_preview_height=10
  let g:gundo_width=30
  nnoremap <Leader>u :GundoToggle<CR>

  " Ack
  nnoremap <Leader>a :Ack
  nnoremap <Leader>af :AckFile

  " SuperTab
  let g:SuperTabDefaultCompletionType='context'
  let g:SuperTabLongestEnhanced=1

  " LustyExplorer
  let g:LustyExplorerSuppressRubyWarning=1
  nnoremap <Leader>r :LustyFilesystemExplorerFromHere<CR>
  nnoremap <Leader>g :LustyBufferGrep<CR>
  nnoremap <Leader>b :LustyBufferExplorer<CR>

  " NERDTree
  let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
  let NERDTreeMinimalUI=1
  let NERDTreeDirArrows=1
  map <Leader>n :NERDTreeToggle<CR>

  " Syntastic
  let g:syntastic_enable_signs=1
  let g:syntastic_quiet_warnings=1

  " ZoomWin
  map <Leader><Leader> :ZoomWin<CR>

  " ConqueTerm
  let g:ConqueTerm_ReadUnfocused=1
  let g:ConqueTerm_InsertOnEnter=1
  let g:ConqueTerm_CWInsert=1
  let g:ConqueTerm_Color=1
  map <Leader>s  :match<CR>:set nolist<CR>:ConqueTerm zsh<CR>
  map <Leader>sh :match<CR>:set nolist<CR>:ConqueTermSplit zsh<CR>
  map <Leader>sv :match<CR>:set nolist<CR>:ConqueTermVSplit zsh<CR>
" }

function! s:Kwbd(kwbdStage)
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) == winnr()
      return
    endif
  endif
  if(a:kwbdStage == 1)
    if(!buflisted(winbufnr(0)))
      bd!
      return
    endif
    let s:kwbdBufNum = bufnr("%")
    let s:kwbdWinNum = winnr()
    windo call s:Kwbd(2)
    execute s:kwbdWinNum . 'wincmd w'
    let s:buflistedLeft = 0
    let s:bufFinalJump = 0
    let l:nBufs = bufnr("$")
    let l:i = 1
    while(l:i <= l:nBufs)
      if(l:i != s:kwbdBufNum)
        if(buflisted(l:i))
          let s:buflistedLeft = s:buflistedLeft + 1
        else
          if(bufexists(l:i) && !strlen(bufname(l:i)) && !s:bufFinalJump)
            let s:bufFinalJump = l:i
          endif
        endif
      endif
      let l:i = l:i + 1
    endwhile
    if(!s:buflistedLeft)
      if(s:bufFinalJump)
        windo if(buflisted(winbufnr(0))) | execute "b! " . s:bufFinalJump | endif
      else
        enew
        let l:newBuf = bufnr("%")
        windo if(buflisted(winbufnr(0))) | execute "b! " . l:newBuf | endif
      endif
      execute s:kwbdWinNum . 'wincmd w'
    endif
    if(buflisted(s:kwbdBufNum) || s:kwbdBufNum == bufnr("%"))
      execute "bd! " . s:kwbdBufNum
    endif
    if(!s:buflistedLeft)
      set nobuflisted
    endif
    else
    if(bufnr("%") == s:kwbdBufNum)
      let prevbufvar = bufnr("#")
      if(prevbufvar > 0 && buflisted(prevbufvar) && prevbufvar != s:kwbdBufNum)
        b #
      else
        bn
      endif
    endif
  endif
endfunction
command! Kwbd call <SID>Kwbd(1)
nnoremap <silent> <Plug>Kwbd :<C-u>Kwbd<CR>

if has('gui_running')
  autocmd VimResized * wincmd =

  set guifont=Menlo:h12
  set guioptions=aemg
  set guitablabel=%t
  set mousehide

  if has('mac')
    let macvim_skip_cmd_opt_movement = 1
    let macvim_hig_shift_movement = 1
  endif
endif
